
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800200  00000408  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a24  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014c8  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000679  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00003c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a58  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b2  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00004a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	93 c0       	rjmp	.+294    	; 0x164 <__vector_15>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	13 e0       	ldi	r17, 0x03	; 3
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e8 e0       	ldi	r30, 0x08	; 8
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a6 3a       	cpi	r26, 0xA6	; 166
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	b4 d0       	rcall	.+360    	; 0x2c8 <main>
 160:	51 c1       	rjmp	.+674    	; 0x404 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <__vector_15>:
}

void Timer2_stop(void) {
    TCCR2B = 0;  // Stop Timer2 by clearing the prescaler bits
    TCCR2A = 0;  // Reset the control registers
    PORTB &= ~(1 << LED_PIN);  // Turn off the LED
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <Timer2_fastpwm_start>:
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	f8 94       	cli
 17e:	e0 eb       	ldi	r30, 0xB0	; 176
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	10 82       	st	Z, r1
 184:	c1 eb       	ldi	r28, 0xB1	; 177
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	18 82       	st	Y, r1
 18a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
 18e:	4f ef       	ldi	r20, 0xFF	; 255
 190:	48 9f       	mul	r20, r24
 192:	90 01       	movw	r18, r0
 194:	49 9f       	mul	r20, r25
 196:	30 0d       	add	r19, r0
 198:	11 24       	eor	r1, r1
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	ab e7       	ldi	r26, 0x7B	; 123
 1a4:	b4 e1       	ldi	r27, 0x14	; 20
 1a6:	1f d1       	rcall	.+574    	; 0x3e6 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
 1b0:	80 81       	ld	r24, Z
 1b2:	83 60       	ori	r24, 0x03	; 3
 1b4:	80 83       	st	Z, r24
 1b6:	88 81       	ld	r24, Y
 1b8:	87 60       	ori	r24, 0x07	; 7
 1ba:	88 83       	st	Y, r24
 1bc:	80 81       	ld	r24, Z
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
 1c2:	78 94       	sei
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <UART_init>:
    UART_SendString("\r Back to Main Menu\n");
    UART_SendString("\rChoose an option: \n");
}

void UART_init(uint16_t Baudrate) {
    uint16_t ubrr = F_CPU / 16 / Baudrate - 1;
 1ca:	9c 01       	movw	r18, r24
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	60 e2       	ldi	r22, 0x20	; 32
 1d2:	71 ea       	ldi	r23, 0xA1	; 161
 1d4:	87 e0       	ldi	r24, 0x07	; 7
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	e4 d0       	rcall	.+456    	; 0x3a2 <__udivmodsi4>
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	31 09       	sbc	r19, r1
    UBRR1H = (uint8_t)(ubrr >> 8);
 1de:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    UBRR1L = (uint8_t)ubrr;
 1e2:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    UCSR1B = (1 << RXEN1) | (1 << TXEN1);
 1ec:	88 e1       	ldi	r24, 0x18	; 24
 1ee:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 1f2:	08 95       	ret

000001f4 <UART_SendChar>:
}

void UART_SendChar(uint8_t data) {
    while (!(UCSR1A & (1 << UDRE1)));
 1f4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1f8:	95 ff       	sbrs	r25, 5
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <UART_SendChar>
    UDR1 = data;
 1fc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 200:	08 95       	ret

00000202 <UART_SendString>:
}

void UART_SendString(char *text) {
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
    while (*text != '\0') {
 208:	02 c0       	rjmp	.+4      	; 0x20e <UART_SendString+0xc>
        UART_SendChar(*text);
 20a:	f4 df       	rcall	.-24     	; 0x1f4 <UART_SendChar>
        text++;
 20c:	21 96       	adiw	r28, 0x01	; 1
    while (!(UCSR1A & (1 << UDRE1)));
    UDR1 = data;
}

void UART_SendString(char *text) {
    while (*text != '\0') {
 20e:	88 81       	ld	r24, Y
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <UART_SendString+0x8>
        UART_SendChar(*text);
        text++;
    }
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <print_menu>:
    TCCR2A = 0;  // Reset the control registers
    PORTB &= ~(1 << LED_PIN);  // Turn off the LED
}

void print_menu(void) {
    UART_SendString("\r\nMENU:\n");
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	f1 df       	rcall	.-30     	; 0x202 <UART_SendString>
    UART_SendString("\r0. Exit\n");
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	ee df       	rcall	.-36     	; 0x202 <UART_SendString>
    UART_SendString("\r1. Print lowercase alphabet\n");
 226:	84 e1       	ldi	r24, 0x14	; 20
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	eb df       	rcall	.-42     	; 0x202 <UART_SendString>
    UART_SendString("\r2. Print uppercase alphabet\n");
 22c:	82 e3       	ldi	r24, 0x32	; 50
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	e8 df       	rcall	.-48     	; 0x202 <UART_SendString>
    UART_SendString("\r3. Blink LED 3 times\n");
 232:	80 e5       	ldi	r24, 0x50	; 80
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	e5 df       	rcall	.-54     	; 0x202 <UART_SendString>
    UART_SendString("\r4. Start 2Hz Signal\n");
 238:	87 e6       	ldi	r24, 0x67	; 103
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	e2 df       	rcall	.-60     	; 0x202 <UART_SendString>
    UART_SendString("\r5. Stop Timer\n");
 23e:	8d e7       	ldi	r24, 0x7D	; 125
 240:	92 e0       	ldi	r25, 0x02	; 2
 242:	df df       	rcall	.-66     	; 0x202 <UART_SendString>
    UART_SendString("\r6. Brightness Control\n");
 244:	8d e8       	ldi	r24, 0x8D	; 141
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	dc df       	rcall	.-72     	; 0x202 <UART_SendString>
 24a:	85 ea       	ldi	r24, 0xA5	; 165
    UART_SendString("\rChoose an option: \n");
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	d9 cf       	rjmp	.-78     	; 0x202 <UART_SendString>
 250:	08 95       	ret

00000252 <brightness_menu>:
 252:	8a eb       	ldi	r24, 0xBA	; 186
 254:	92 e0       	ldi	r25, 0x02	; 2
}

void brightness_menu(void) {
    UART_SendString("\r\nBrightness Menu:\n");
 256:	d5 df       	rcall	.-86     	; 0x202 <UART_SendString>
    UART_SendString("\r To increase Brightness press +\n");
 258:	8e ec       	ldi	r24, 0xCE	; 206
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	d2 df       	rcall	.-92     	; 0x202 <UART_SendString>
    UART_SendString("\r To decrease Brightness press -\n");
 25e:	80 ef       	ldi	r24, 0xF0	; 240
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	cf df       	rcall	.-98     	; 0x202 <UART_SendString>
    UART_SendString("\r Back to Main Menu\n");
 264:	82 e1       	ldi	r24, 0x12	; 18
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	cc df       	rcall	.-104    	; 0x202 <UART_SendString>
    UART_SendString("\rChoose an option: \n");
 26a:	85 ea       	ldi	r24, 0xA5	; 165
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	c9 cf       	rjmp	.-110    	; 0x202 <UART_SendString>
 270:	08 95       	ret

00000272 <UART_GetChar>:
 272:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
        text++;
    }
}

uint8_t UART_GetChar(void) {
    while (!(UCSR1A & (1 << RXC1)));  // Wait for the reception of data
 276:	88 23       	and	r24, r24
 278:	e4 f7       	brge	.-8      	; 0x272 <UART_GetChar>
    return UDR1;  // Return received character
 27a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 27e:	08 95       	ret

00000280 <LED_blink>:

void LED_blink(void) {
    DDRB |= (1 << LED_PIN);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	80 61       	ori	r24, 0x10	; 16
 284:	84 b9       	out	0x04, r24	; 4
    for (int i = 0; i < 3; i++) {
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	1a c0       	rjmp	.+52     	; 0x2c0 <LED_blink+0x40>
        PORTB |= (1 << LED_PIN);
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	4f e9       	ldi	r20, 0x9F	; 159
 294:	86 e8       	ldi	r24, 0x86	; 134
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	41 50       	subi	r20, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <LED_blink+0x18>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LED_blink+0x22>
 2a2:	00 00       	nop
        _delay_ms(500);
        PORTB &= ~(1 << LED_PIN);
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	4f e9       	ldi	r20, 0x9F	; 159
 2ac:	86 e8       	ldi	r24, 0x86	; 134
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	41 50       	subi	r20, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <LED_blink+0x30>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LED_blink+0x3a>
 2ba:	00 00       	nop
    return UDR1;  // Return received character
}

void LED_blink(void) {
    DDRB |= (1 << LED_PIN);
    for (int i = 0; i < 3; i++) {
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	23 30       	cpi	r18, 0x03	; 3
 2c2:	31 05       	cpc	r19, r1
 2c4:	1c f3       	brlt	.-58     	; 0x28c <LED_blink+0xc>
        PORTB |= (1 << LED_PIN);
        _delay_ms(500);
        PORTB &= ~(1 << LED_PIN);
        _delay_ms(500);
    }
}
 2c6:	08 95       	ret

000002c8 <main>:

int main(void) {
 2c8:	cf 93       	push	r28
    UART_init(38400);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	96 e9       	ldi	r25, 0x96	; 150
 2ce:	7d df       	rcall	.-262    	; 0x1ca <UART_init>
    DDRB |= (1 << LED_PIN);  // Set LED pin as output (PB4 for PWM)
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	80 61       	ori	r24, 0x10	; 16
    print_menu();
 2d4:	84 b9       	out	0x04, r24	; 4

    while (1) {
        uint8_t userInput = UART_GetChar();
 2d6:	a1 df       	rcall	.-190    	; 0x21a <print_menu>
 2d8:	cc df       	rcall	.-104    	; 0x272 <UART_GetChar>

        if (userInput == '0') {
 2da:	80 33       	cpi	r24, 0x30	; 48
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x18>
 2de:	5a c0       	rjmp	.+180    	; 0x394 <main+0xcc>
            UART_SendString("Exiting...\n");
            break;
        } else if (userInput == '1') {
 2e0:	81 33       	cpi	r24, 0x31	; 49
 2e2:	61 f4       	brne	.+24     	; 0x2fc <main+0x34>
            for (char ch = 'a'; ch <= 'z'; ch++) {
                UART_SendChar(ch);
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <main+0x26>
 2e6:	8c 2f       	mov	r24, r28
 2e8:	85 df       	rcall	.-246    	; 0x1f4 <UART_SendChar>

        if (userInput == '0') {
            UART_SendString("Exiting...\n");
            break;
        } else if (userInput == '1') {
            for (char ch = 'a'; ch <= 'z'; ch++) {
 2ea:	cf 5f       	subi	r28, 0xFF	; 255
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <main+0x28>
 2ee:	c1 e6       	ldi	r28, 0x61	; 97
 2f0:	cb 37       	cpi	r28, 0x7B	; 123
                UART_SendChar(ch);
            }
            UART_SendString("\n");
 2f2:	c8 f3       	brcs	.-14     	; 0x2e6 <main+0x1e>
 2f4:	88 eb       	ldi	r24, 0xB8	; 184
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	84 df       	rcall	.-248    	; 0x202 <UART_SendString>
        } else if (userInput == '2') {
 2fa:	4a c0       	rjmp	.+148    	; 0x390 <main+0xc8>
 2fc:	82 33       	cpi	r24, 0x32	; 50
 2fe:	61 f4       	brne	.+24     	; 0x318 <main+0x50>
            for (char ch = 'A'; ch <= 'Z'; ch++) {
                UART_SendChar(ch);
 300:	04 c0       	rjmp	.+8      	; 0x30a <main+0x42>
 302:	8c 2f       	mov	r24, r28
 304:	77 df       	rcall	.-274    	; 0x1f4 <UART_SendChar>
            for (char ch = 'a'; ch <= 'z'; ch++) {
                UART_SendChar(ch);
            }
            UART_SendString("\n");
        } else if (userInput == '2') {
            for (char ch = 'A'; ch <= 'Z'; ch++) {
 306:	cf 5f       	subi	r28, 0xFF	; 255
 308:	01 c0       	rjmp	.+2      	; 0x30c <main+0x44>
 30a:	c1 e4       	ldi	r28, 0x41	; 65
 30c:	cb 35       	cpi	r28, 0x5B	; 91
                UART_SendChar(ch);
            }
            UART_SendString("\n");
 30e:	c8 f3       	brcs	.-14     	; 0x302 <main+0x3a>
 310:	88 eb       	ldi	r24, 0xB8	; 184
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	76 df       	rcall	.-276    	; 0x202 <UART_SendString>
        } else if (userInput == '3') {
 316:	3c c0       	rjmp	.+120    	; 0x390 <main+0xc8>
            LED_blink();
 318:	83 33       	cpi	r24, 0x33	; 51
 31a:	11 f4       	brne	.+4      	; 0x320 <main+0x58>
 31c:	b1 df       	rcall	.-158    	; 0x280 <LED_blink>
        } else if (userInput == '4') {
 31e:	38 c0       	rjmp	.+112    	; 0x390 <main+0xc8>
 320:	84 33       	cpi	r24, 0x34	; 52
            UART_SendString("Starting 2Hz signal...\n");
 322:	21 f4       	brne	.+8      	; 0x32c <main+0x64>
 324:	83 e3       	ldi	r24, 0x33	; 51
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	6c df       	rcall	.-296    	; 0x202 <UART_SendString>
            // Timer1 code for 2Hz signal (not relevant for brightness)
        } else if (userInput == '5') {
 32a:	32 c0       	rjmp	.+100    	; 0x390 <main+0xc8>
            UART_SendString("Stopping Timer...\n");
 32c:	85 33       	cpi	r24, 0x35	; 53
 32e:	21 f4       	brne	.+8      	; 0x338 <main+0x70>
 330:	8b e4       	ldi	r24, 0x4B	; 75
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	66 df       	rcall	.-308    	; 0x202 <UART_SendString>
            // Stop the timer for 2Hz signal (not relevant for brightness)
        } else if (userInput == '6') {
 336:	2c c0       	rjmp	.+88     	; 0x390 <main+0xc8>
 338:	86 33       	cpi	r24, 0x36	; 54
            brightness_menu();
 33a:	39 f5       	brne	.+78     	; 0x38a <main+0xc2>
 33c:	8a df       	rcall	.-236    	; 0x252 <brightness_menu>
            while (1) {
	            uint8_t brightnessInput = UART_GetChar();
 33e:	99 df       	rcall	.-206    	; 0x272 <UART_GetChar>
	            
	            if (brightnessInput == '+') {
 340:	8b 32       	cpi	r24, 0x2B	; 43
 342:	59 f4       	brne	.+22     	; 0x35a <main+0x92>
		            if (brightness < 100) {
 344:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 348:	84 36       	cpi	r24, 0x64	; 100
 34a:	c8 f4       	brcc	.+50     	; 0x37e <main+0xb6>
			            brightness += 10;  // Increase brightness
 34c:	86 5f       	subi	r24, 0xF6	; 246
 34e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			            UART_SendString("Brightness Increased\n");
 352:	8e e5       	ldi	r24, 0x5E	; 94
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	55 df       	rcall	.-342    	; 0x202 <UART_SendString>
 358:	12 c0       	rjmp	.+36     	; 0x37e <main+0xb6>
		            }
		            } else if (brightnessInput == '-') {
 35a:	8d 32       	cpi	r24, 0x2D	; 45
 35c:	59 f4       	brne	.+22     	; 0x374 <main+0xac>
		            if (brightness > 0) {
 35e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 362:	88 23       	and	r24, r24
			            brightness -= 10;  // Decrease brightness
 364:	61 f0       	breq	.+24     	; 0x37e <main+0xb6>
 366:	8a 50       	subi	r24, 0x0A	; 10
			            UART_SendString("Brightness Decreased\n");
 368:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 36c:	84 e7       	ldi	r24, 0x74	; 116
 36e:	93 e0       	ldi	r25, 0x03	; 3
		            }
		            } else if (brightnessInput == 'q') {
 370:	48 df       	rcall	.-368    	; 0x202 <UART_SendString>
		            break;  // Exit the brightness menu
		            } else {
		            UART_SendString("Invalid input, try again.\n");
 372:	05 c0       	rjmp	.+10     	; 0x37e <main+0xb6>
 374:	81 37       	cpi	r24, 0x71	; 113
 376:	61 f0       	breq	.+24     	; 0x390 <main+0xc8>
	            }

	            Timer2_fastpwm_start(brightness);  // Update the LED brightness
 378:	8a e8       	ldi	r24, 0x8A	; 138
 37a:	93 e0       	ldi	r25, 0x03	; 3
 37c:	42 df       	rcall	.-380    	; 0x202 <UART_SendString>
 37e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	            brightness_menu();  // Display the brightness menu again
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	f9 de       	rcall	.-526    	; 0x178 <Timer2_fastpwm_start>
            }
 386:	65 df       	rcall	.-310    	; 0x252 <brightness_menu>
            
        } else {
            UART_SendString("Invalid input, try again.\n");
 388:	da cf       	rjmp	.-76     	; 0x33e <main+0x76>
 38a:	8a e8       	ldi	r24, 0x8A	; 138
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	39 df       	rcall	.-398    	; 0x202 <UART_SendString>
        }
        print_menu();
 390:	44 df       	rcall	.-376    	; 0x21a <print_menu>
 392:	a2 cf       	rjmp	.-188    	; 0x2d8 <main+0x10>
    }
 394:	87 e2       	ldi	r24, 0x27	; 39

    while (1) {
        uint8_t userInput = UART_GetChar();

        if (userInput == '0') {
            UART_SendString("Exiting...\n");
 396:	93 e0       	ldi	r25, 0x03	; 3
 398:	34 df       	rcall	.-408    	; 0x202 <UART_SendString>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
            UART_SendString("Invalid input, try again.\n");
        }
        print_menu();
    }
    return 0;
}
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <__udivmodsi4>:
 3a2:	a1 e2       	ldi	r26, 0x21	; 33
 3a4:	1a 2e       	mov	r1, r26
 3a6:	aa 1b       	sub	r26, r26
 3a8:	bb 1b       	sub	r27, r27
 3aa:	fd 01       	movw	r30, r26
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <__udivmodsi4_ep>

000003ae <__udivmodsi4_loop>:
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	ee 1f       	adc	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	a2 17       	cp	r26, r18
 3b8:	b3 07       	cpc	r27, r19
 3ba:	e4 07       	cpc	r30, r20
 3bc:	f5 07       	cpc	r31, r21
 3be:	20 f0       	brcs	.+8      	; 0x3c8 <__udivmodsi4_ep>
 3c0:	a2 1b       	sub	r26, r18
 3c2:	b3 0b       	sbc	r27, r19
 3c4:	e4 0b       	sbc	r30, r20
 3c6:	f5 0b       	sbc	r31, r21

000003c8 <__udivmodsi4_ep>:
 3c8:	66 1f       	adc	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	1a 94       	dec	r1
 3d2:	69 f7       	brne	.-38     	; 0x3ae <__udivmodsi4_loop>
 3d4:	60 95       	com	r22
 3d6:	70 95       	com	r23
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	9b 01       	movw	r18, r22
 3de:	ac 01       	movw	r20, r24
 3e0:	bd 01       	movw	r22, r26
 3e2:	cf 01       	movw	r24, r30
 3e4:	08 95       	ret

000003e6 <__umulhisi3>:
 3e6:	a2 9f       	mul	r26, r18
 3e8:	b0 01       	movw	r22, r0
 3ea:	b3 9f       	mul	r27, r19
 3ec:	c0 01       	movw	r24, r0
 3ee:	a3 9f       	mul	r26, r19
 3f0:	70 0d       	add	r23, r0
 3f2:	81 1d       	adc	r24, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	91 1d       	adc	r25, r1
 3f8:	b2 9f       	mul	r27, r18
 3fa:	70 0d       	add	r23, r0
 3fc:	81 1d       	adc	r24, r1
 3fe:	11 24       	eor	r1, r1
 400:	91 1d       	adc	r25, r1
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
